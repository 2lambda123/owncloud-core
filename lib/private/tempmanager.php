<?php

/**
 * Copyright (c) 2014 Robin Appelman <icewind@owncloud.com>
 * This file is licensed under the Affero General Public License version 3 or
 * later.
 * See the COPYING-README file.
 */

namespace OC;

use OCP\ILogger;
use OCP\ITempManager;

class TempManager implements ITempManager {
	/**
	 * Current temporary files and folders
	 *
	 * @var string[]
	 */
	protected $current = array();

	/**
	 * i.e. /tmp on linux systems
	 *
	 * @var string
	 */
	protected $tmpBaseDir;

	/**
	 * @var \OCP\ILogger
	 */
	protected $log;

	/**
	 * @param \OCP\ILogger $logger
	 */
	public function __construct(ILogger $logger) {
		$this->tmpBaseDir = $this->t_get_temp_dir();
		$this->log = $logger;
	}

	protected function generatePath($postFix) {
		return $this->tmpBaseDir . '/oc_tmp_' . md5(time() . rand()) . $postFix;
	}

	/**
	 * Create a temporary file and return the path
	 *
	 * @param string $postFix
	 * @return string
	 */
	public function getTemporaryFile($postFix = '') {
		$file = $this->generatePath($postFix);
		if (is_writable($this->tmpBaseDir)) {
			touch($file);
			$this->current[] = $file;
			return $file;
		} else {
			$this->log->warning(
				'Can not create a temporary file in directory {dir}. Check it exists and has correct permissions',
				array(
					'dir' => $this->tmpBaseDir
				)
			);
			return false;
		}
	}

	/**
	 * Create a temporary folder and return the path
	 *
	 * @param string $postFix
	 * @return string
	 */
	public function getTemporaryFolder($postFix = '') {
		$path = $this->generatePath($postFix);
		if (is_writable($this->tmpBaseDir)) {
			mkdir($path);
			$this->current[] = $path;
			return $path . '/';
		} else {
			$this->log->warning(
				'Can not create a temporary folder in directory {dir}. Check it exists and has correct permissions',
				array(
					'dir' => $this->tmpBaseDir
				)
			);
			return false;
		}
	}

	/**
	 * Remove the temporary files and folders generated during this request
	 */
	public function clean() {
		$this->cleanFiles($this->current);
	}

	protected function cleanFiles($files) {
		foreach ($files as $file) {
			if (file_exists($file)) {
				try {
					\OC_Helper::rmdirr($file);
				} catch (\UnexpectedValueException $ex) {
					$this->log->warning(
						"Error deleting temporary file/folder: {file} - Reason: {error}",
						array(
							'file' => $file,
							'error' => $ex->getMessage()
						)
					);
				}
			}
		}
	}

	/**
	 * Remove old temporary files and folders that were failed to be cleaned
	 */
	public function cleanOld() {
		$this->cleanFiles($this->getOldFiles());
	}

	/**
	 * Get all temporary files and folders generated by oc older than an hour
	 *
	 * @return string[]
	 */
	protected function getOldFiles() {
		$cutOfTime = time() - 3600;
		$files = array();
		$dh = opendir($this->tmpBaseDir);
		while (($file = readdir($dh)) !== false) {
			if (substr($file, 0, 7) === 'oc_tmp_') {
				$path = $this->tmpBaseDir . '/' . $file;
				$mtime = filemtime($path);
				if ($mtime < $cutOfTime) {
					$files[] = $path;
				}
			}
		}
		return $files;
	}

	/**
	 * Get the temporary directory to store transfer data
	 * @return null|string Path to the temporary directory or null
	 */
	public function t_get_temp_dir() {
		// Get the temporary directory and log the path if loglevel is set to debug
		// Info: based on the temp dir, further directories may be created unique to the instance
		$temp = self::gather_temp_dir();
		\OCP\Util::writeLog('Core', 'Temporary directory set to: ' . ($temp ? $temp : 'NULL'), \OCP\Util::DEBUG);
		return $temp;
	}

	/**
	 * Get a temporary directory from possible sources
	 * If a temporary directory is set in config.php, use this one
	 * @return null|string Path to the temporary directory or null
	 */
	private function gather_temp_dir() {
		if ($temp = self::get_config_temp_dir()) return $temp;
		if ($temp = ini_get('upload_tmp_dir')) return $temp;
		if ($temp = getenv('TMP')) return $temp;
		if ($temp = getenv('TEMP')) return $temp;
		if ($temp = getenv('TMPDIR')) return $temp;
		$temp = tempnam(__FILE__, '');
		if (file_exists($temp)) {
			unlink($temp);
			return dirname($temp);
		}
		if ($temp = sys_get_temp_dir()) return $temp;
		return null;
	}

	/**
	 * Check if the temporary directory is defined in config.php and is present and writable
	 * @return bool|string Path to the temporary directory or false
	 */
	private function get_config_temp_dir() {
		$temp = \OC::$server->getConfig()->getSystemValue('tempdirectory', false);
		// surpress any possible errors caused by is_writable
		// checks missing or invalid path or characters, wrong permissions ect
		if ($temp) {
			try {
				if (is_writeable($temp)) {
					return $temp;
				} else {
					\OCP\Util::writeLog('Core', 'Manually set temporary directory in config.php is not present or writable: ' . $temp, \OCP\Util::WARN);
					return false;
				}
			} catch (Exception $e) {
				return false;
			}
		}
	}

}
